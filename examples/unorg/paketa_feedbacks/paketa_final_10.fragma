#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

#define PI 3.1415

float rand(vec3 p){return fract(sin(dot(p, vec3(87.1313, 31.5757, 17.2323))+sin(dot(p, vec3(15.1313, 67.4747, 76.1313)))) * 4189.3257);}
  
float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

float hue2rgb(float f1, float f2, float hue) {
    if (hue < 0.0)
        hue += 1.0;
    else if (hue > 1.0)
        hue -= 1.0;
    float res;
    if ((6.0 * hue) < 1.0)
        res = f1 + (f2 - f1) * 6.0 * hue;
    else if ((2.0 * hue) < 1.0)
        res = f2;
    else if ((3.0 * hue) < 2.0)
        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
    else
        res = f1;
    return res;
}

vec3 hsl2rgb(vec3 hsl) {
    vec3 rgb;
    
    if (hsl.y == 0.0) {
        rgb = vec3(hsl.z); // Luminance
    } else {
        float f2;
        
        if (hsl.z < 0.5)
            f2 = hsl.z * (1.0 + hsl.y);
        else
            f2 = hsl.z + hsl.y - hsl.y * hsl.z;
            
        float f1 = 2.0 * hsl.z - f2;
        
        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));
        rgb.g = hue2rgb(f1, f2, hsl.x);
        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));
    }   
    return rgb;
}

vec3 hsl2rgb(float h, float s, float l) {
    return hsl2rgb(vec3(h, s, l));
}

float cellnoise(vec2 uv, float t){
    vec2 fuv = fract(uv);
    vec2 iuv = floor(uv);
    
    const float rad = 1.;
    float cell_dist = 1e8;
    for(float x=-rad; x<=rad; x+=1.){
    for(float y=-rad; y<=rad; y+=1.){
    vec2 pos = vec2(x,y);
    float angle = rand(vec3(pos+iuv, .0))*3.1415*2.+t;
    vec2 cell_pos = vec2(.5)+vec2(cos(angle),sin(angle))*.4;
    vec2 luv = fuv-pos;
    float dist = length(luv-cell_pos);
    cell_dist = min(cell_dist, dist);
    }
    }
    
    return cell_dist;// / sqrt(rad * 4.);
}

float pattern(vec3 p){
vec3 q = vec3(snoise(p), snoise(p+vec3(.0,.1,.2)),snoise(p+vec3(.2,.1,.3)));
vec3 r = vec3(snoise(q), snoise(q+vec3(.0,.1,.2)),snoise(q+vec3(.2,.1,.3)));
return snoise(q+2.1*r);
}

void main() {
	vec2 uv = UV;
    vec2 tc = uv;
    vec2 rs = resolution;
    
    uv = (uv-.5)*rs/rs.y;
    vec2 ouv = uv;
    
    float angle = rand(vec3(uv,sin(floor(time*4.))))*PI*2.;
    float pck = rand(vec3(uv,.5+sin(floor(time*4.))));
    vec2 shake = vec2(cos(angle),sin(angle))*10./rs.x;
    
    if(pck > .87)
    uv += shake;
    
    vec2 ms = (mouse-.5)*rs/rs.y;
    
    float mdst = length(ouv-ms);
    float mdst2 = smoothstep(.0,.04,mdst);
    mdst = smoothstep(.0,.05,mdst);
    
    
    uv *= 1.;
    float nval = 
    //cellnoise(uv, time);
    pattern(vec3(uv*.3,time*.005));
    //snoise(vec3(uv,time*.1));
    //float nval_sat = snoise(vec3(uv,1.));
    //float nval_lum = snoise(vec3(uv,2.));
    vec3 col = hsl2rgb(vec3(nval, 1., .7));
    
    
    //tc = (tc-mouse)*(1.-mdst*.005)+mouse;
    //tc = (tc-.5)*(mdst2)+.5;
    tc += ms * 4. / rs;
    vec3 bck = texture(bckbuffer, tc).rgb;
    
    bck += hsl2rgb(vec3(sin(time)*.5+.5, 1., .8)) * (1.-mdst);
    
    vec2 str = (4.+mdst)/rs;
    vec2 tc_r = tc + (bck.gb*2.-1.) * str;
    float bck_r = texture(bckbuffer,tc_r).r;
    
    vec2 tc_g = tc + (bck.rb*2.-1.) * str;
    float bck_g = texture(bckbuffer,tc_g).g;
    
    vec2 tc_b = tc + (bck.rg*2.-1.) * str;
    float bck_b = texture(bckbuffer,tc_b).b;
    
    vec3 ncol = vec3(bck_r,bck_g,bck_b);
    
    col = mix(col, ncol, .994);
    
	outputColor = vec4(col,1.);
}
/**========END_OF_FRAGMENT========**/#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

uniform sampler2D buffer_1;

#define PI 3.1415

float rand(vec3 p){return fract(sin(dot(p, vec3(87.1313, 31.5757, 17.2323))+sin(dot(p, vec3(15.1313, 67.4747, 76.1313)))) * 4189.3257);}

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

float hue2rgb(float f1, float f2, float hue) {
    if (hue < 0.0)
        hue += 1.0;
    else if (hue > 1.0)
        hue -= 1.0;
    float res;
    if ((6.0 * hue) < 1.0)
        res = f1 + (f2 - f1) * 6.0 * hue;
    else if ((2.0 * hue) < 1.0)
        res = f2;
    else if ((3.0 * hue) < 2.0)
        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
    else
        res = f1;
    return res;
}

vec3 hsl2rgb(vec3 hsl) {
    vec3 rgb;
    
    if (hsl.y == 0.0) {
        rgb = vec3(hsl.z); // Luminance
    } else {
        float f2;
        
        if (hsl.z < 0.5)
            f2 = hsl.z * (1.0 + hsl.y);
        else
            f2 = hsl.z + hsl.y - hsl.y * hsl.z;
            
        float f1 = 2.0 * hsl.z - f2;
        
        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));
        rgb.g = hue2rgb(f1, f2, hsl.x);
        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));
    }   
    return rgb;
}

vec3 hsl2rgb(float h, float s, float l) {
    return hsl2rgb(vec3(h, s, l));
}

void main() {
	vec2 uv = UV;
    
    vec2 rs = resolution;
    
    
    vec2 cellSize = 1. / rs;
    float h_sc = 180.;
    vec3 normal = vec3(
		( length(texture( buffer_1, uv + vec2( - cellSize.x, 0 ) ))
		 - length(texture( buffer_1, uv + vec2( cellSize.x, 0 ) )) ) * h_sc,
		( length(texture( buffer_1, uv + vec2( 0, - cellSize.y ) ))
		 - length(texture( buffer_1, uv + vec2( 0, cellSize.y ) )) ) * h_sc,
    1.0 );
    normal = normalize(normal);
    vec3 col = vec3((normal.r + normal.g + normal.b) / 3.);//vec3(length(texture( buffer_1, uv))/sqrt(4.));
    
    float nval = snoise(col*.5);
    vec3 ncol = vec3(sin(nval*5.)*.5+.5,
    sin(nval*10.)*.5+.5,
    sin(nval*6.)*.5+.5);
    col = (col + texture(buffer_1, uv).rgb*.2)/2.;
    col *= nval;
    col += .2;
    col *= 5.;
    
	outputColor = vec4(col,1.);
}
/**========END_OF_FRAGMENT========**/