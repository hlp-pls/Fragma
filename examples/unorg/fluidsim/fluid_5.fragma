#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

uniform float count;
const float epsilon = 1.0;
const float density = 1.0;
const float delta = .01;

uniform vec2 mousedt;
uniform bool mousedown;
  
void main() {
	vec2 uv = UV;
    vec2 rs = resolution;
	vec4 col = texture(bckbuffer, uv);

    //float obs = texture(obstacle, uv).r;
	bool no_obstacle = true;//(obs == 1.0)? true : false;

    if(time <= 0.1){
			//uv *= 2.0;
			//uv = fract(uv);
			//col.rg = sin(uv.yx * 3.1415 * 2.0) / (length(vUv - 0.5) + 1.0);
        col.rgb = vec3(.0);
	}else{
      //
        if(no_obstacle){
            if(count == 1.0){
          //advection
            uv.xy -= texture(bckbuffer, uv).rg * delta;
            col.xy = texture(bckbuffer, uv).xy;
          
          //add velocity
                if(mousedown){
                    vec2 muv = (uv-.5)*rs/rs.y;
                    vec2 mpos = (mouse-.5)*rs/rs.y;
                   float mr = smoothstep(0.08, 0.01, length(muv - mpos));
                   col.xy += mr * mousedt * 50.;
                }
           }
        
        //divergence
        float divergence = (-2.0 * density * epsilon / delta) * (
            texture(bckbuffer, uv + vec2(1.0, 0.0) / resolution).x -
            texture(bckbuffer, uv + vec2(-1.0, 0.0) / resolution).x +
            texture(bckbuffer, uv + vec2(0.0, 1.0) / resolution).y -
            texture(bckbuffer, uv + vec2(0.0, -1.0) / resolution).y
        );

        //pressure
        float pressure = (
          divergence +
          texture(bckbuffer, uv + vec2(2.0, 0.0) / resolution).z +
          texture(bckbuffer, uv + vec2(-2.0, 0.0) / resolution).z +
          texture(bckbuffer, uv + vec2(0.0, 2.0) / resolution).z +
          texture(bckbuffer, uv + vec2(0.0, -2.0) / resolution).z
        ) / 4.0;

        col.z = pressure;

        //gradient
        col.x = col.x - (
          texture(bckbuffer, uv + vec2(1.0,0.0)/resolution).z - 
          texture(bckbuffer, uv + vec2(-1.0,0.0)/resolution).z) * delta / (2.0 * density * epsilon);
        col.y = col.y - (
          texture(bckbuffer, uv + vec2(0.0,1.0)/resolution).z - 
          texture(bckbuffer, uv + vec2(0.0,-1.0)/resolution).z) * delta / (2.0 * density * epsilon);
        }else{
            col.rgb = texture(bckbuffer, uv+texture(bckbuffer, uv).xy * delta).rgb;
        }
    
    

    }

    if(!no_obstacle){
        col.rgb = vec3(0.0);
    }

	outputColor = vec4(col.rgb, 1.0);
}

/**========END_OF_FRAGMENT========**/#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform vec2 mousedt;
uniform float time;

uniform sampler2D buffer_1;

const float delta = .01;

float mono(vec3 rgb){
return (rgb.r + rgb.g + rgb.b)/3.;
}

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

float noise(vec2 p){
	vec2 ip = floor(p);
	vec2 u = fract(p);
	u = u*u*(3.0-2.0*u);
		
	float res = mix(
		mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
		mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
    return res*res;
}

float hue2rgb(float f1, float f2, float hue) {
	if (hue < 0.0)
	hue += 1.0;
	else if (hue > 1.0)
	hue -= 1.0;
	float res;
	if ((6.0 * hue) < 1.0)
		res = f1 + (f2 - f1) * 6.0 * hue;
	else if ((2.0 * hue) < 1.0)
	res = f2;
	else if ((3.0 * hue) < 2.0)
	res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
	else
	res = f1;
	return res;
}

vec3 hsl2rgb(vec3 hsl) {
	vec3 rgb;
		
	if (hsl.y == 0.0) {
		rgb = vec3(hsl.z); // Luminance
	} else {
		float f2;
			
		if (hsl.z < 0.5)
			f2 = hsl.z * (1.0 + hsl.y);
		else
			f2 = hsl.z + hsl.y - hsl.y * hsl.z;
				
		float f1 = 2.0 * hsl.z - f2;
			
		rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));
		rgb.g = hue2rgb(f1, f2, hsl.x);
		rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));
	}   
	return rgb;
}

void main() {
	vec2 uv = UV;
	vec4 col = texture(bckbuffer, uv);

	//float obs = texture2D(obstacle, uv).r;
	bool no_obstacle = true;//(obs == 1.0)? true : false;

    if(no_obstacle){
		if(time <= 0.1){
        /*
			uv *= 10.0;
			vec2 grid = floor(uv);

            if(mod(grid.x, 2.0) != mod(grid.y, 2.0)){
                col.rgb = vec3(1.0);// * vec3(rand(grid + 0.0), rand(grid + 1.0), rand(grid + 2.0));
            }
        
				//col.rgb += smoothstep(0.21, 0.2, length(uv - 0.5));
        */
		}else{
			uv.xy -= texture(buffer_1, uv).rg * delta;
			col = texture(bckbuffer, uv); 

			if(mouse.x != 0.0 && mouse.y != 0.0){
                col.rgb += smoothstep(0.031, 0.03, length(UV - mouse)) * 
                hsl2rgb(vec3(noise(mousedt * 1.0 + 1.0 + time), 0.8, 0.5)) * 0.8 * length(mousedt * 20.0);
            }
				//col.rgb += 
           col.rgb *= .95;
		}
	}

	if(!no_obstacle){
      col.rgb = vec3(0.0);
	}

    
	outputColor = vec4(col.rgb, 1.0);
}/**========END_OF_FRAGMENT========**/#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

uniform sampler2D buffer_2;

float mono(vec3 rgb){
return (rgb.r + rgb.g + rgb.b)/3.;
}

void main() {
	vec2 uv = UV;
    vec2 rs = resolution;
    vec3 col = texture(buffer_2,uv).rgb;
    
    vec2 uv_top = uv + vec2(.0,1.)/rs;
    vec2 uv_bot = uv + vec2(.0,-1.)/rs;
    vec2 uv_left = uv + vec2(1.,.0)/rs;
    vec2 uv_right = uv + vec2(-1.,.0)/rs;
    
    float h_top = mono(texture(buffer_2, uv_top).rgb);
    float h_bot = mono(texture(buffer_2, uv_bot).rgb);
    float h_left = mono(texture(buffer_2, uv_left).rgb);
    float h_right = mono(texture(buffer_2, uv_right).rgb);
    
    float hsc = 10.;
    vec3 norm = vec3(h_left-h_right,h_top-h_bot,1.);
    norm.xy *= hsc;
    
    col = norm;
	outputColor = vec4(col,1.);
}
/**========END_OF_FRAGMENT========**/