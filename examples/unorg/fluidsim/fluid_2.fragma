#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

uniform float count;
const float epsilon = 1.0;
const float density = 1.0;
const float delta = .01;

uniform vec2 mousedt;
uniform bool mousedown;
  
void main() {
	vec2 uv = UV;
	vec4 col = texture(bckbuffer, uv);

    //float obs = texture(obstacle, uv).r;
	bool no_obstacle = true;//(obs == 1.0)? true : false;

    if(time <= 1.0){
			//uv *= 2.0;
			//uv = fract(uv);
			//col.rg = sin(uv.yx * 3.1415 * 2.0) / (length(vUv - 0.5) + 1.0);
        col.rgb = vec3(.0);
	}else{
      //
        if(no_obstacle){
            if(count == 1.0){
          //advection
            uv.xy -= texture(bckbuffer, uv).rg * delta;
            col.xy = texture(bckbuffer, uv).xy;
          
          //add velocity
                if(mousedown){
                    float mr = smoothstep(0.04, 0.03, length(uv - mouse));
                    col.xy += mr * mousedt * 100.;
                }
           }
        
        //divergence
        float divergence = (-2.0 * density * epsilon / delta) * (
            texture(bckbuffer, uv + vec2(1.0, 0.0) / resolution).x -
            texture(bckbuffer, uv + vec2(-1.0, 0.0) / resolution).x +
            texture(bckbuffer, uv + vec2(0.0, 1.0) / resolution).y -
            texture(bckbuffer, uv + vec2(0.0, -1.0) / resolution).y
        );

        //pressure
        float pressure = (
          divergence +
          texture(bckbuffer, uv + vec2(2.0, 0.0) / resolution).z +
          texture(bckbuffer, uv + vec2(-2.0, 0.0) / resolution).z +
          texture(bckbuffer, uv + vec2(0.0, 2.0) / resolution).z +
          texture(bckbuffer, uv + vec2(0.0, -2.0) / resolution).z
        ) / 4.0;

        col.z = pressure;

        //gradient
        col.x = col.x - (
          texture(bckbuffer, uv + vec2(1.0,0.0)/resolution).z - 
          texture(bckbuffer, uv + vec2(-1.0,0.0)/resolution).z) * delta / (2.0 * density * epsilon);
        col.y = col.y - (
          texture(bckbuffer, uv + vec2(0.0,1.0)/resolution).z - 
          texture(bckbuffer, uv + vec2(0.0,-1.0)/resolution).z) * delta / (2.0 * density * epsilon);
        }else{
            col.rgb = texture(bckbuffer, uv+texture(bckbuffer, uv).xy * delta).rgb;
        }
    
    

    }

    if(!no_obstacle){
        col.rgb = vec3(0.0);
    }

	outputColor = vec4(col.rgb, 1.0);
}

/**========END_OF_FRAGMENT========**/#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

uniform sampler2D buffer_1;

float mono(vec3 rgb){
return (rgb.r + rgb.g + rgb.b)/3.;
}

void main() {
	vec2 uv = UV;
    vec2 rs = resolution;
    vec3 col = texture(buffer_1,uv).rgb;
    
    vec2 uv_top = uv + vec2(.0,1.)/rs;
    vec2 uv_bot = uv + vec2(.0,-1.)/rs;
    vec2 uv_left = uv + vec2(1.,.0)/rs;
    vec2 uv_right = uv + vec2(-1.,.0)/rs;
    
    float h_top = mono(texture(buffer_1, uv_top).rgb);
    float h_bot = mono(texture(buffer_1, uv_bot).rgb);
    float h_left = mono(texture(buffer_1, uv_left).rgb);
    float h_right = mono(texture(buffer_1, uv_right).rgb);
    
    vec3 norm = vec3(h_top-h_bot, h_left-h_right, 1.);
    
	outputColor = vec4(norm,1.);
}
/**========END_OF_FRAGMENT========**/