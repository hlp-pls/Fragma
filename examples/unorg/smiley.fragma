#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

#define PI 3.1415
	
vec2 rotation(vec2 p, float angle){return mat2(cos(angle),-sin(angle),sin(angle),cos(angle))*p;}
  
float rand(vec3 p){return fract(sin(dot(p, vec3(87.1313, 31.5757, 17.2323))+sin(dot(p, vec3(15.1313, 67.4747, 76.1313)))) * 4189.3257);}
float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}
float round(float v){float det = fract(v);if(det < .5){return floor(v);}else{return floor(v)+1.;}}

float noise(vec3 p){vec3 a = floor(p); vec3 d = p - a;d = d * d * (3.0 - 2.0 * d);vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0); vec4 k1 = perm(b.xyxy);vec4 k2 = perm(k1.xyxy + b.zzww); vec4 c = k2 + a.zzzz;vec4 k3 = perm(c);vec4 k4 = perm(c + 1.0); vec4 o1 = fract(k3 * (1.0 / 41.0)); vec4 o2 = fract(k4 * (1.0 / 41.0)); vec4 o3 = o2 * d.z + o1 * (1.0 - d.z); vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x); return o4.y * d.y + o4.x * (1.0 - d.y);}

struct ray {vec3 pos;vec3 dir;};

float smin( float a, float b, float k ){float h = max( k-abs(a-b), 0.0 )/k; return min( a, b ) - h*h*k*(1.0/4.0);}

//Create the camera ray
ray create_camera_ray(vec2 uv, vec3 camPos, vec3 lookAt, float zoom){
	vec3 f = normalize(lookAt - camPos);
	vec3 r = cross(vec3(0.0,1.0,0.0),f);
	vec3 u = cross(f,r);
	vec3 c=camPos+f*zoom;
	vec3 i=c+uv.x*r+uv.y*u;
	vec3 dir=i-camPos;
	return ray(camPos,normalize(dir));
}

float sdRoundBox( vec3 p, vec3 b, float r ){
	vec3 q = abs(p) - b;
	return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;
}

//box
float sdBox( vec3 p, vec3 b ) {
	vec3 d = abs(p) - b;
	return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float sdTriPrism( vec3 p, vec2 h ){
	vec3 q = abs(p);
	return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
}

//sphere
float sdSphere( vec3 p, float s ){
	return length(p)-s;
}

float sdRoundedCylinder( vec3 p, float ra, float rb, float h ){
	vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );
	return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;
}

float sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb){
	p.x = abs(p.x);
	float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);
	return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
}

//Distance to scene at point
vec2 distToScene(vec3 p){
	//return min(p.z,min(p.x,min(p.y,length(p-vec3(0.3,0.0,0.4))-0.3)));
	vec2 id = floor(abs(p.xz));
	//p.xz = mod(p.xz, 1.0);
	//p.xz = rotation(p.xz,time);
	float plane = p.y+1.;
	//
	float rad = noise(p*1.+time*1.);
	float wrinkle = sin(rad*40.+time*1.)*rad;
			
	p.xz = rotation(p.xz,PI * -0.25 + time*1.5);
	p.yz = rotation(p.yz,sin(time*3.) * PI * .2);

	float ball = sdRoundedCylinder(p, .6, .2, .0) - (.003 * wrinkle + .02 * rad);
	ball = mix(ball, sdSphere(p, .6), .05);
	vec3 mp = p;
	mp.xz = rotation(mp.xz, sin(time*5.+mp.x*2.) * .15);
	float mang = PI * .2;
	float mmode = floor((sin(time * 5.)*.5+.5) * 2.);
	float face = 1e8;
	if(mmode == .0){
		face = sdBox(mp-vec3(.0,.25,-.3),
		vec3(.5,.0,.0))-.13;
	}else{
		vec3 nmp = mp-vec3(.0,.25,-.3);
		nmp.x = nmp.x - .3*clamp(round(nmp.x/.3), -2.,2.);
				
		nmp.yz = rotation(nmp.yz, PI * -.5);
		face = sdTriPrism(nmp,vec2(.2,.1));
	}

	float outline_w = .02;
	float face_outline = face - outline_w;

	vec3 ep = p;
	vec3 eop = ep;
	float time_off = .0;
	if(ep.x < .0){
		time_off = 1.;
	}else{

	}
	
    float mode = floor((sin(time * 5. + time_off)*.5+.5) * 5.);
	float er = (sin(floor(time*10.) + time_off)*.5+.5)*.08+.07;
	ep.x = abs(ep.x);
	ep = ep-vec3(.5,.25,.3);
	if(mode == .0){
		face = min(face,sdSphere(ep,er));
	}else if(mode == 1.){
		float xe = sdBox(ep, vec3(.0,.0,.1))-.12;
		face = min(face, xe);
	}else if(mode == 2.){
		ep.xz = abs(ep.xz);
		ep.xz = rotation(ep.xz, PI * .25);
				
		float xe = sdBox(ep, vec3(.0,.0,.1))-.12;
		face = min(face, xe);
	}else if(mode == 3.){
		ep.xz = rotation(ep.xz, PI);
		ep.x = abs(ep.x);
		ep.xz = rotation(ep.xz, PI * .25);
				
		float xe = sdBox(ep, vec3(.0,.0,.1))-.12;
		face = min(face, xe);
	}else{
		ep.xz = rotation(ep.xz, time * 9.);
		ep.xz = abs(ep.xz);
		ep.xz = rotation(ep.xz, PI * -.25);
				
		float xe = sdBox(ep, vec3(.0,.0,.1))-.1;
		face = min(face, xe);
	}
	face_outline = min(face_outline, face-outline_w);

	float obj_id = .0;
	if(plane > ball){
		obj_id = 1.;
	}
	float dist = min(plane,ball);
	if(dist > face_outline){
		obj_id = 3.;
	}

	if(dist > face){
		obj_id = 2.;
		//dist = smin(dist, ball - (.001 * wrinkle + .0 * rad),.2);
	}
	//dist = min(dist, face);
			
			
	return vec2(dist, obj_id);
}

//Estimate normal based on distToScene function
vec3 estimateNormal(vec3 p, float EPS){
	float xPl=distToScene(vec3(p.x+EPS,p.y,p.z)).x;
	float xMi=distToScene(vec3(p.x-EPS,p.y,p.z)).x;
	float yPl=distToScene(vec3(p.x,p.y+EPS,p.z)).x;
	float yMi=distToScene(vec3(p.x,p.y-EPS,p.z)).x;
	float zPl=distToScene(vec3(p.x,p.y,p.z+EPS)).x;
	float zMi=distToScene(vec3(p.x,p.y,p.z-EPS)).x;
	float xDiff=xPl-xMi;
	float yDiff=yPl-yMi;
	float zDiff=zPl-zMi;
	return normalize(vec3(xDiff,yDiff,zDiff));
}

#define maxDist 5.
#define maxIters 100
#define EPSILON .0001

//soft shadow multiplier
float getShadowMultiplier(vec3 rayEnd, vec3 lightPos){
	vec3 rayDir=lightPos-rayEnd;
	vec3 dir=normalize(rayDir);
	float maxLength=length(rayDir);//anything past the light we don't care about
	float finalDist=100.0;
	vec3 rayPos=rayEnd;
	float totalDist=0.1;rayPos+=dir*totalDist;
			
	float res=1.0;
	float softness = 10.0;
			
	for(int i=0;i<maxIters;i++){
		if(totalDist<maxLength&&totalDist<maxDist){
			if(finalDist<EPSILON) return 0.0;
				finalDist=distToScene(rayPos).x;
				totalDist+=finalDist;
				res=min(res,softness*finalDist/totalDist);
				rayPos+=finalDist*dir;
		}else{
			break;
		}
	}
	return res;
}

struct DOF {
	vec3 col;
	float focal_length;
};

DOF getDepthofField(vec2 uv, vec3 campos, vec3 focal_point){
	vec3 camPos = vec3(campos);
	vec3 lookAt = vec3(focal_point);
	float zoom = 1.2;
			
	ray camRay = create_camera_ray(uv, camPos, lookAt, zoom);
			
	float totalDist = 0.0;
	vec2 finalDist = distToScene(camRay.pos);
	for(int i = 0; i < maxIters; i++){
		if(finalDist.x > EPSILON && finalDist.x < maxDist){
			camRay.pos += finalDist.x * camRay.dir;
			totalDist += finalDist.x;
			finalDist = distToScene(camRay.pos);
		}else{
			break;
		}
	}

	float lon = rand(vec3(uv,.0))*2.*PI;
	float lat = rand(vec3(uv,1.))*PI;
	float rad = rand(vec3(uv,2.));
	vec3 shake = vec3(cos(lat)*cos(lon),
	cos(lat)*sin(lon),
	sin(lat))*rad*.5;
	vec3 lightPos = vec3(2.0, 2.5, 1.0)+shake;
	vec3 normal = estimateNormal(camRay.pos, EPSILON);//length(lookAt - camRay.pos) * 0.001);
			
	//dotSN is the diffuse component of Phong shading
	float dotSN = dot(normal, normalize(lightPos - camRay.pos));
	float shadow = getShadowMultiplier(camRay.pos, lightPos);
			
	vec3 L = normalize(lightPos - camRay.pos);
	// Lambert's cosine law
	float lambertian = max(dot(normal, L), 0.0);
	float specular = 0.0;
	if(lambertian > 0.0) {
		vec3 R = reflect(-L, normal);
		vec3 V = normalize(camRay.pos); // Vector to viewer
		// Compute the specular term
		float specAngle = max(dot(R, V), 0.0);
		specular = pow(specAngle, 30.0);
	}
			
	float dist = length(lightPos - camRay.pos) / 2.;
	float focal_length = length(lookAt - camRay.pos);
			
	vec3 env = vec3(1.);
	//env = vec3(length(env));

	float env_intensity = 0.;
	float specular_intensity = 1.;
	float diffuse_intensity = 1.;
	
	vec3 diffuse = vec3(dotSN);// = (vec3(1.0) * (1.0 - env_intensity) + env * env_intensity) * dotSN;
	if(finalDist.y == .0){
		diffuse *= vec3(.5,1.,1.);
		specular_intensity = .0;
	}else if(finalDist.y == 1.){
		diffuse *= vec3(1.,.9,.3);
		specular_intensity = .2;
		diffuse_intensity = 1.2;
	}else if(finalDist.y == 2.){
		diffuse *= vec3(.2);//vec3(1.,.7,.4);
		specular_intensity = 1.;
	}else if(finalDist.y == 3.){
		diffuse *= vec3(1.);//vec3(1.,.7,.4);
		specular_intensity = 1.;
	}

	vec3 col = (specular * specular_intensity + diffuse * diffuse_intensity) / dist;
	return DOF(shadow * col, focal_length);
}


void main() {
    vec2 rs = resolution;
	vec2 uv = UV;
    uv -= vec2(0.5); //offset, so center of screen is origin
	uv.x *= rs.x / rs.y; //scale, so there is no rectangular distortion
	uv *= 2.5;
			
	vec3 raypos = vec3(1.1,2.1,1.1);//sin(time * 0.0025) * 2.5);
	vec3 focalpos = vec3(0.0, 0.0, 0.0);
			
	DOF dof = getDepthofField(uv, raypos, focalpos);
	outputColor = vec4(dof.col,1.);
}
/**========END_OF_FRAGMENT========**/