#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

const float mouseSize = 0.01;
const float viscosityConstant = 0.98;
const float heightCompensation = 0.0;

#define PI 3.1415
#define BOUNDS 1.0

float rand(vec3 p){return fract(sin(dot(p, vec3(87.1313, 31.5757, 17.2323))+sin(dot(p, vec3(15.1313, 67.4747, 76.1313)))) * 4189.3257);}
float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

void main() {
	vec2 rs = resolution.xy;
	vec2 cellSize = 1.0 / rs.xy;

    vec2 uv = UV;
    
    float sc = 5.;
    float angle = noise(vec3(uv*sc+vec2(time*.5,.0),time))*2.*PI;
    uv += vec2(cos(angle),sin(angle))*2./rs;
    uv.x += .001;
    
    sc = 5.;
    vec2 fuv = fract(uv * sc);
    vec2 iuv = floor(uv * sc);
    
    const float rad = 1.;
    float cell_dist = 1e8;
    vec2 min_cell;
    for(float x=-rad; x<=rad; x+=1.){
        for(float y=-rad; y<=rad; y+=1.){
            vec2 uoff = vec2(x,y);
            vec2 guv = fuv - uoff;
            vec2 cell_pos = vec2(.5);
            float angle = rand(vec3(iuv + uoff,.0)) * PI * 2. + time;
            cell_pos += vec2(cos(angle),sin(angle)) * .3; 
            float curr_dist = length(guv - cell_pos);
            if(curr_dist < cell_dist){
               min_cell = (cell_pos+iuv+uoff)/sc;
            }
            cell_dist = min(cell_dist, curr_dist);
        }
    }
    vec2 move = uv-min_cell;
    uv += normalize(move) * 0.002;

    // heightmapValue.x == height from previous frame
    // heightmapValue.y == height from penultimate frame
    // heightmapValue.z, heightmapValue.w not used
    vec4 heightmapValue = texture( bckbuffer, uv );

    // Get neighbours
    vec4 north = texture( bckbuffer, uv + vec2( 0.0, cellSize.y ) );
    vec4 south = texture( bckbuffer, uv + vec2( 0.0, - cellSize.y ) );
    vec4 east = texture( bckbuffer, uv + vec2( cellSize.x, 0.0 ) );
    vec4 west = texture( bckbuffer, uv + vec2( - cellSize.x, 0.0 ) );

    // https://web.archive.org/web/20080618181901/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm

    float newHeight = ( ( north.x + south.x + east.x + west.x ) * 0.5 - heightmapValue.y ) * (viscosityConstant);

    
    // Mouse influence
    vec2 muv = (uv - .5)*rs/rs.y;
    vec2 ms = (mouse)*rs/rs.y;
    float mousePhase = clamp( length(uv - vec2(ms.x, ms.y) ) * PI / mouseSize, 0.0, PI );
    
    //newHeight += ( cos( mousePhase ) + 1.0 ) * 0.28;
    
    newHeight += .03*angle/(2.*PI);

    heightmapValue.y = heightmapValue.x;
    heightmapValue.x = newHeight;
    
    heightmapValue.z = angle/(2.*PI);
    outputColor = vec4(heightmapValue.rgb,1.);
}
/**========END_OF_FRAGMENT========**/#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;
uniform sampler2D buffer_1;

#define PI 3.1415
  
void main() {
	vec2 rs = resolution.xy;
	vec2 uv = UV;
    vec2 tc = uv;
    vec2 cellSize = 1. / rs;
    float h_sc = 50.;
    vec3 normal = vec3(
		( texture( buffer_1, uv + vec2( - cellSize.x, 0 ) ).x
		 - texture( buffer_1, uv + vec2( cellSize.x, 0 ) ).x ) * h_sc,
		( texture( buffer_1, uv + vec2( 0, - cellSize.y ) ).x
		 - texture( buffer_1, uv + vec2( 0, cellSize.y ) ).x ) * h_sc,
    1.0 );
	vec3 col = texture( buffer_1, uv).rgb;
    vec3 light = vec3(2.,2.,h_sc*1.1);
    float sh = dot(normalize(light-vec3(uv,min(col.x * h_sc, h_sc))),normal);
    col.rgb = vec3(max(sh, .0));
	outputColor = vec4(col.rgb,1.);
}
/**========END_OF_FRAGMENT========**/