#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

#define PI 3.1415

float sdSphere( vec3 p, float s ){
  return length(p)-s;
}

float sdBox( vec3 p, vec3 b ){
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float sdCapsule( vec3 p, vec3 a, vec3 b, float r ){
  vec3 pa = p - a, ba = b - a;
  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
  return length( pa - ba*h ) - r;
}

float sdVerticalCapsule( vec3 p, float h, float r ){
  p.y -= clamp( p.y, 0.0, h );
  return length( p ) - r;
}

float sdEllipsoid( vec3 p, vec3 r ){
  float k0 = length(p/r);
  float k1 = length(p/(r*r));
  return k0*(k0-1.0)/k1;
}

float sdTriPrism( vec3 p, vec2 h ){
  vec3 q = abs(p);
  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
}

float sdRoundedCylinder( vec3 p, float ra, float rb, float h ){
  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );
  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;
}

float smin( float a, float b, float k ){
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*k*(1.0/4.0);
}

vec2 rotate(vec2 p, float a){
    return mat2(cos(a), -sin(a), sin(a), cos(a)) * p;
}

float get_dist(vec3 p){
    
    float plane = p.y + 1.5;
    
    p.xz = rotate(p.xz, time);
    //p.yz = rotate(p.yz, time);
    
    vec3 head_p = p;
    float head = 1e8;
    float head_upper_tip = sdRoundedCylinder(head_p - vec3(0.,0.,-.5), .41, .2, .3);
    float head_upper = sdBox(head_p, vec3(.65,.4,.68)) - .1;
    
    head = min(head,head_upper_tip);
    head = min(head,head_upper);
    
    head_p.y += .5;
    head_p.yz = rotate(head_p.yz, -.25);
    float head_lower_tip = sdRoundedCylinder(head_p - vec3(0.,0.,-.5), .3, .1, .0);
    float head_lower = sdBox(head_p, vec3(.47,.0,.6)) - .1; 
    
    head = smin(min(head_lower_tip, head_lower), head, .1);
    //head = min(head,head_lower_tip);
    //head = min(head,head_lower);
    
    float eyes = 1e8;
    vec3 eyes_p = p;
    eyes_p.x = abs(eyes_p.x);
    eyes_p = eyes_p - vec3(.9,.2,-.25);
    eyes_p.xy = rotate(eyes_p.xy, .2);
    float eyeball = sdEllipsoid(eyes_p, vec3(.17,.38,.36));
    
    float eyelids = eyeball-.05;
    eyelids = max(-eyeball,eyelids);
    eyelids = max(-eyes_p.y+.05,eyelids);
    
    eyes = min(eyes, eyeball);
    eyes = min(eyes, eyelids);
    
    float nose = 1e8;
    vec3 nose_p = p;
    nose_p.x = abs(nose_p.x);
    nose_p = nose_p - vec3(.1,.3,-1.3);
    nose_p.xz = rotate(nose_p.xz, .5);
    nose_p.yz = rotate(nose_p.yz, -1.);
    
    float nostril = sdVerticalCapsule(nose_p,.3,.05);
    
    float neck = 1e8;
    vec3 neck_p = p - vec3(0.,.2,.9);
    neck_p.yz = rotate(neck_p.yz, PI*.5+.1);
    neck_p.yz = rotate(neck_p.yz, neck_p.y*.5);
    
    neck = sdVerticalCapsule(neck_p,.9,.35);
    
    head = head-.1;
    head = max(-nostril,head);
    head = smin(head,neck,.1);
    //head = head-.1;
    
    float dist = plane;
    dist = min(dist, head);
    dist = min(dist, eyes);
    
    return dist;
}

void main() {
	vec2 uv = UV;
    vec2 rs = resolution;
    uv = (uv-.5)*rs/rs.y;
    
    vec3 camera = vec3(0.,2.,-3.);
    vec3 lookat = vec3(0.,0.,0.);
    
    vec3 cam_dir = normalize(lookat - camera);
    
    float cam_screen_dst = 1.;
    vec3 screen_center = camera + cam_dir * cam_screen_dst;
    
    vec3 screen_y_axis = cross(cam_dir,cross(cam_dir,vec3(0.,-1.,0.))); 
    vec3 screen_x_axis = cross(screen_y_axis, cam_dir);
    
    screen_y_axis = normalize(screen_y_axis);
    screen_x_axis = normalize(screen_x_axis);
    
    vec3 screen_coords = screen_center + screen_y_axis * uv.y + screen_x_axis * uv.x;
    
    vec3 ray_origin = screen_coords;
    vec3 ray_dir = normalize(ray_origin-camera);
    
    float depth = 0.;
    for(int i=0; i<64; i++){
       float step_depth = get_dist(ray_origin);
       ray_origin += ray_dir * step_depth;
       depth += step_depth;
       if(depth < .01 || depth > 100){
        break;
       }
    }
    
    vec3 col = vec3(1./depth);
    
	outputColor = vec4(col,1.);
}
/**========END_OF_FRAGMENT========**/