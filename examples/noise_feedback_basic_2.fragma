#version 330
out vec4 outputColor;
in vec2 UV;

uniform sampler2D bckbuffer;
uniform vec2 resolution;
uniform vec2 mouse;
uniform float time;

float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

void main() {
	 vec2 uv = UV;
    vec2 tc = uv;
    
    float nsc = 3.;
    float nval = noise(vec3(uv*nsc,time*.5));
    nval = sin(nval * 2.) / nval;
    nval *= 3.1415 * 2.;
    vec2 off = vec2(cos(nval),sin(nval))*.001;
    
    vec2 p1 = tc;
    vec2 p2 = tc+vec2(.001,.0);
    vec2 p3 = tc+vec2(.0,.001);
    float h1 = length(texture(bckbuffer,p1));
    float h2 = length(texture(bckbuffer,p2));
    float h3 = length(texture(bckbuffer,p3));
    
    vec3 p1_p2 = vec3(p2,h2)-vec3(p1,h1);
    vec3 p1_p3 = vec3(p3,h3)-vec3(p1,h1);
    
    vec3 nrm = cross(normalize(p1_p2),normalize(p1_p3));
    
    off -= nrm.xy * .001;
    
    vec3 col = texture(bckbuffer,tc+off).rgb;
    
    float dst = length(uv-mouse);
    float circle = smoothstep(.0,.02,dst-.01);
    
    float col_ch = sin(time)*10.;
    
    col.rgb += vec3(
    sin(col_ch*3.)*.5+.5,
    sin(col_ch*2.)*.5+.5,
    sin(col_ch*1.)*.5+.5) * (1.-circle) * .07;
    
    col.rgb *= .999;
    
	outputColor = vec4(col,1.);
}
/**========END_OF_FRAGMENT========**/